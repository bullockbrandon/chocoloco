/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chocoloco;

import com.github.lgooddatepicker.components.DatePicker;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Element;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

import com.github.lgooddatepicker.components.DateTimePicker;
import com.github.lgooddatepicker.zinternaltools.InternalUtilities;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import java.awt.Dimension;
import java.awt.FlowLayout;
import javax.swing.JFrame;
/**
 *
 * @author ispre
 */
public class ViewReports extends javax.swing.JFrame {

    /**
     * Creates new form ViewReports
     */
    public ViewReports() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        print_accounting = new javax.swing.JButton();
        print_member = new javax.swing.JButton();
        print_service = new javax.swing.JButton();
        print_provider = new javax.swing.JButton();
        main_menu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        print_accounting.setText("Print Accounting Report");

        print_member.setText("Print Member Report");
        print_member.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_memberActionPerformed(evt);
            }
        });

        print_service.setText("Print Services Report");
        print_service.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_serviceActionPerformed(evt);
            }
        });

        print_provider.setText("Print Provider Report");
        print_provider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_providerActionPerformed(evt);
            }
        });

        main_menu.setText("Main Menu");
        main_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_menuActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("View Reports");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(print_member, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(print_service, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(print_accounting)
                            .addComponent(print_provider, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(main_menu)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(print_provider, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(print_member, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(print_service, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(print_accounting, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(main_menu)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void main_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_menuActionPerformed
       this.dispose();
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_main_menuActionPerformed

    private void print_memberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_memberActionPerformed
        DatePicker startdate = new DatePicker();
        DatePicker enddate = new DatePicker();
        String s = "Start Date:\n";
        String end = "End Date:\n";
        Object[] params = {s,startdate,end,enddate};
        JOptionPane.showConfirmDialog(null,params, "Members Report" , JOptionPane.PLAIN_MESSAGE);
        
        System.out.println("" + startdate);
        System.out.println("" + enddate);
        
        Document document = new Document();
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chocoloco", "choco", "loco");
            DateFormat df = new SimpleDateFormat("MM-dd-yy");
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("src/reports/members/Report " + df.format(new Date()) + ".pdf"));
            document.open();
            
            Paragraph title = new Paragraph("Member Report\nWeek: " + startdate + " - " + enddate + "\n==========================================================================\n");
            title.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(title);
            
            String vData = "SELECT * FROM visits WHERE visitdate BETWEEN '"+startdate+"' AND '"+enddate+"'";
            PreparedStatement vpstmt = conn.prepareStatement(vData);
            ResultSet vrs = vpstmt.executeQuery();
            
            while (vrs.next()) {
                String visitMID = vrs.getString("visitmemberID");
                String visitPID = vrs.getString("visitproviderID");
                String visitSID = vrs.getString("visitserviceID");
                String visitdate = vrs.getString("visitdate");
                
                String mData = "select * from members where memberID = '"+ visitMID +"'";
                PreparedStatement mpstmt = conn.prepareStatement(mData);
                ResultSet mrs = mpstmt.executeQuery();
                if (mrs.next()) {
                    String memberID = mrs.getString("memberID");
                    String memberName = mrs.getString("memberName");
                    String memberAddress = mrs.getString("memberAddress");
                    String memberCity = mrs.getString("memberCity");
                    String memberState = mrs.getString ("memberState");
                    String memberZip = mrs.getString("memberZip");

                    document.add(new Paragraph("Member: "+ memberID + "\n" + memberName + "\n" + memberAddress + "\n" + memberCity + "," + memberState + " " + memberZip));

                    String pData = "select * from providers where providerID = '"+ visitPID +"'";
                    PreparedStatement ppstmt = conn.prepareStatement(pData);
                    ResultSet prs = ppstmt.executeQuery();
                    if (prs.next()) {
                        String providerName = prs.getString("providerName");
                        
                        document.add(new Paragraph("     Date of Service: " + visitdate + "\n     Provider: " + providerName));
                        
                        String sData = "select * from services where serviceID = '"+ visitSID +"'";
                        PreparedStatement spstmt = conn.prepareStatement(sData);
                        ResultSet srs = spstmt.executeQuery();
                        if (srs.next()) {
                            String serviceName = srs.getString("serviceName");
                            
                            document.add(new Paragraph("     Service: " + serviceName + "\n==========================================================================\n"));
                        }
                    }
                }             
            }
            
            
            conn.close();
            document.close();
            writer.close();
            JOptionPane.showMessageDialog(null, "Members Report Printed");
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_print_memberActionPerformed

    private void print_providerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_providerActionPerformed
        DatePicker startdate = new DatePicker();
        DatePicker enddate = new DatePicker();
        String s = "Start Date:\n";
        String end = "End Date:\n";
        Object[] params = {s,startdate,end,enddate};
        JOptionPane.showConfirmDialog(null,params, "Members Report" , JOptionPane.PLAIN_MESSAGE);
        
        System.out.println("" + startdate);
        System.out.println("" + enddate);
        
        int totalcons = 0;
        float totalfee = 0;   
        
        Document document = new Document();
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chocoloco", "choco", "loco");
            DateFormat df = new SimpleDateFormat("MM-dd-yy");
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("src/reports/providers/Report " + df.format(new Date()) + ".pdf"));
            document.open();
            
            Paragraph title = new Paragraph("Provider Report\nWeek: " + startdate + " - " + enddate + "\n==========================================================================\n");
            title.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(title);
            
            String vData = "SELECT * FROM visits WHERE visitdate BETWEEN '"+startdate+"' AND '"+enddate+"'";
            PreparedStatement vpstmt = conn.prepareStatement(vData);
            ResultSet vrs = vpstmt.executeQuery();
            
            
            while (vrs.next()) {
                String visitMID = vrs.getString("visitmemberID");
                String visitPID = vrs.getString("visitproviderID");
                String visitSID = vrs.getString("visitserviceID");
                String visitdate = vrs.getString("visitdate");
                String visitcompdate = vrs.getString("visitcompdate");
                String visitcomptime = vrs.getString("visitcomptime");
                
                System.out.println("" + visitcompdate);
                System.out.println("" + visitcomptime);
                
                String pData = "select * from providers where providerID = '"+ visitPID +"'";
                PreparedStatement ppstmt = conn.prepareStatement(pData);
                ResultSet prs = ppstmt.executeQuery();
                
                if (prs.next()) {
                    String providerID = prs.getString("providerID");
                    String providerName = prs.getString("providerName");
                    String providerAddress = prs.getString("providerAddress");
                    String providerCity = prs.getString("providerCity");
                    String providerState = prs.getString ("providerState");
                    String providerZip = prs.getString("providerZip");

                    document.add(new Paragraph("Provider: "+ providerID + "\n" + providerName + "\n" + providerAddress + "\n" + providerCity + ", " + providerState + " " + providerZip));
                    
                    document.add(new Paragraph("    Date of Service: " + visitdate + "\n    Date Received: " + visitcompdate + "  " + visitcomptime));
                    
                    String mData = "select * from members where memberID = '"+ visitMID +"'";
                    PreparedStatement mpstmt = conn.prepareStatement(mData);
                    ResultSet mrs = mpstmt.executeQuery();
                    
                    if (mrs.next()){
                        String memberID = mrs.getString("memberID");
                        String memberName = mrs.getString("memberName");
                        
                        document.add(new Paragraph("    Member Name: " + memberName + "\n    Member ID: " + memberID));
                        
                        String sData = "select * from services where serviceID = '"+ visitSID +"'";
                        PreparedStatement spstmt = conn.prepareStatement(sData);
                        ResultSet srs = spstmt.executeQuery();
                        
                        if (srs.next()){
                            String serviceFee = srs.getString("serviceFee");
                            
                            document.add(new Paragraph("    Service ID: " + visitSID + "\n    Fee: $" + serviceFee + "\n==========================================================================\n"));
                            
                            float fee = Float.parseFloat(serviceFee);
                            totalfee = totalfee + fee;
                            totalcons++;
                        }                  
                    }                 
                } 
            }            
            document.add(new Paragraph("\n\n\nTotal Consultations: " + totalcons + "\nTotal Fee: $" + totalfee));
            
            conn.close();
            document.close();
            writer.close();
            JOptionPane.showMessageDialog(null, "Providers Report Printed");      
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_print_providerActionPerformed

    private void print_serviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_serviceActionPerformed
      Document document = new Document();
      try
      {
        DateFormat df = new SimpleDateFormat("MM-dd-yy");
        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("src/reports/services/Report " + df.format(new Date()) + ".pdf"));
         
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chocoloco", "choco", "loco");
        String getService = "select * from services order by serviceName ASC";
        PreparedStatement pstmt = conn.prepareStatement(getService);
        ResultSet rs = pstmt.executeQuery();       
        document.open();
	
        DateFormat df2 = new SimpleDateFormat("EEEE, MMMM dd, yyyy  HH:mm:ss");
        Paragraph title = new Paragraph("Provider Directory\n" + df2.format(new Date()) + "\n\n");
        title.setAlignment(Paragraph.ALIGN_CENTER);
        document.add(title);
        
        PdfPTable table = new PdfPTable(3);
        PdfPCell cell = new PdfPCell(new Paragraph("SERVICES"));
        cell.setColspan(8);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        cell.setPadding(10.0f);

        table.addCell(cell);
        table.addCell("Name: ");
        table.addCell("ID: ");
        table.addCell("Fee: ");
        
        while (rs.next()){
            String serviceID = rs.getString("serviceID");
            String serviceName = rs.getString("serviceName");
            String serviceFee = rs.getString("serviceFee");
            
            table.addCell(serviceName);
            table.addCell(serviceID);
            table.addCell("$" + serviceFee);
        }
        
        document.add(table);
        document.close();
        writer.close();         
        JOptionPane.showMessageDialog(null, "Service Report Printed");
      } catch (DocumentException e)
      {
         e.printStackTrace();
      } catch (FileNotFoundException e)
      {
         e.printStackTrace();
      } catch (Exception e)
      {
          JOptionPane.showMessageDialog(null, e);
      }
      
    }//GEN-LAST:event_print_serviceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewReports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton main_menu;
    private javax.swing.JButton print_accounting;
    private javax.swing.JButton print_member;
    private javax.swing.JButton print_provider;
    private javax.swing.JButton print_service;
    // End of variables declaration//GEN-END:variables
}
